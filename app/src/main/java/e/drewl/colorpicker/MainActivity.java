package e.drewl.colorpicker;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.content.FileProvider;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {

    /* The tag used for debugging purposes. */
    private final static String TAG = "Main";
    /** This edits the "welcome" message. */
    private TextView mTextMessage;
    /** Constant to request permission to write to the external storage device. */
    static final int REQUEST_WRITE_STORAGE = 112;
    /** The image uploaded for use in the app. */
    private static Bitmap imagePreview;

    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTextMessage = findViewById(R.id.message);

        final ImageButton openCamera = findViewById(R.id.Camera);
        openCamera.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(final View v) {
                openCamera.setClickable(false);
                Log.d(TAG, "Open camera button clicked");
                startOpenCamera();
                openCamera.setClickable(true);
            }
        });
        final ImageButton openFile = findViewById(R.id.Folder);
        openFile.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(final View v) {
                openCamera.setClickable(false);
                Log.d(TAG, "Open file button clicked");
                startOpenFile();
                openCamera.setClickable(true);
            }
        });
        final ImageView preview = findViewById(R.id.Preview);
        preview.setVisibility(View.INVISIBLE);
    }

    /**
     * Constant to perform an image capture request, i.e.
     * Open the camera.
     */
    private static final int IMAGE_CAPTURE_REQUEST_CODE = 1;
    /** If a picture is taken, the File is stored here. */
    private File currentPhotoFile;

    /**
     * Called when the button is pressed on the phone. This handles
     * the intents to call and store the image. in currentPhotoFile.
     */
    private void startOpenCamera() {
        if (!getExternalStoragePermissions()) {
            if (!getExternalStoragePermissions()) {
                return;
            }
        }
        Log.d(TAG, "startOpenCamera: Photo Intent Starting");
        Intent takePicture = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        //Implement a method to check whether we have permissions to
        //Write to external storage.
        currentPhotoFile = makeImageFile();
        if (takePicture.resolveActivity(getPackageManager()) == null
                || currentPhotoFile == null) {
            // Alert the user if there was a problem taking the photo
            Toast.makeText(getApplicationContext(), "Problem taking photo",
                    Toast.LENGTH_LONG).show();
            Log.w(TAG, "Problem taking photo");
            return;
        }
        //I have no clue how these authorities work.
        Uri photoURI = FileProvider.getUriForFile(this,
                "e.drewl.colorpicker.fileprovider", currentPhotoFile);
        //Stores the camera image at the URI designated when called.
        takePicture.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
        Log.d(TAG, "startOpenCamera: Camera Request Starting");
        startActivityForResult(takePicture, IMAGE_CAPTURE_REQUEST_CODE);
    }

    /**
     *  This makes a File in which to store the image returned by the
     *  camera. This file name is generated by the app name followed by
     *  the date and time.
     * @return The File to be returned.
     */
    File makeImageFile() {
        String imageFileName = "ColorPicker_" +
                new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(new Date());
        File storageDir;
        if (getExternalStoragePermissions()) {
            storageDir = Environment
                    .getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
        } else {
            storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        }
        try {
            /*
            The temporary file means nothing. It will act as if it was a normal
            non-temporary file. a temporary file will just have a series of
            extra random identifying characters at the end of its name.
            */
            return File.createTempFile(imageFileName, ".jpg", storageDir);
        } catch (IOException e) {
            Log.w(TAG, "Problem saving file: " + e);
            return null;
        }
    }

    /** Constant to perform a read file request. */
    private static final int READ_REQUEST_CODE = 42;

    /**
     * Starts the open file browser process for loading images.
     */
    private void startOpenFile() {
        Intent intent;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        } else {
            intent = new Intent(Intent.ACTION_GET_CONTENT);
            intent.addCategory(Intent.CATEGORY_OPENABLE);
        }
        intent.setType("image/*");
        startActivityForResult(intent, READ_REQUEST_CODE);
    }

    /**
     * This is automatically called by the Intents when an activity finishes.
     * This allows for custom operation after the completion of an
     * activity. In this case, this would imply either fetching the
     * picture from the file browser or taking one with the camera.
     * @param requestCode The code used to make the request
     * @param resultCode The code indicating the success or failure.
     * @param resultData Any data returned by the activity.
     */
    public void onActivityResult(final int requestCode, final int resultCode,
                                 final Intent resultData) {
        //This checks to see if anything went wrong when
        //calling the Intent
        if (resultCode != Activity.RESULT_OK) {
            if (resultCode == Activity.RESULT_CANCELED) {
                Log.d(TAG, "onActivityResult: Intent Cancelled");
                if (currentPhotoFile != null) {
                    currentPhotoFile.delete();
                }
                return;
            } else {
                Log.d(TAG, "onActivityResult: Intent Failed.");
                if (currentPhotoFile != null) {
                    currentPhotoFile.delete();
                }
                return;
            }
        }
        /*
        READ_REQUEST_CODE is associated with the file browser, however
        IMAGE_CAPTURE_REQUEST_CODE is associated with the camera.
         */
        Uri currentPhotoURI;
        if (requestCode == READ_REQUEST_CODE) {
            if (resultData == null) {
                Log.d(TAG, "onActivityResult: " +
                        "Results are null. Possibly a cancellation by the user.");
                return;
            }
            currentPhotoURI = resultData.getData();
        } else if (requestCode == IMAGE_CAPTURE_REQUEST_CODE) {
            currentPhotoURI = Uri.fromFile(currentPhotoFile);
            if (getExternalStoragePermissions()) {
                addPhotoToGallery(currentPhotoURI);
            }
        } else {
            Log.w(TAG, "Unhandled activityResult with code " + requestCode);
            return;
        }

        // Now load the photo into the view
        Log.d(TAG, "Photo selection produced URI " + currentPhotoURI);
        loadPhoto(currentPhotoURI);
    }

    private void loadPhoto(Uri currentPhotoURI) {
        //TODO

        //This needs to make the welcome message invisible
        //As well as making the imageView visible.
    }

    /**
     * Makes an Intent and sends an asynchronous broadcast to the appropriate
     * recievers to add it to the image gallery. The broadcast is a
     * fire-and-forget method that will run as the app keeps running.
     * @param currentPhotoURI The URI of the photo to add to the gallery.
     */
    private void addPhotoToGallery(Uri currentPhotoURI) {
        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        mediaScanIntent.setData(currentPhotoURI);
        this.sendBroadcast(mediaScanIntent);
        Log.d(TAG, "Added photo to gallery: " + currentPhotoURI);
    }
    /**
     * @return True if we have permission to write to External Storage.
     * False otherwise.
     */
    private boolean getExternalStoragePermissions() {
        return Settings.getStoragePermissions(this);
    }
}
